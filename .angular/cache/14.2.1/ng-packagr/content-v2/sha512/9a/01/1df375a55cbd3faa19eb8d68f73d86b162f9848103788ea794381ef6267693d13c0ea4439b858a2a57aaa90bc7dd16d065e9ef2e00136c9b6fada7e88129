{"hash":"2ed6d74177c2b8f9146a445eba2fb0970c50d53c","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, Input, Output, NgModule } from '@angular/core';\nimport * as i5 from '@angular/forms';\nimport { FormControl, Validators, ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport * as i1 from '@angular/material/form-field';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport * as i2 from '@angular/material/select';\nimport { MatSelectModule } from '@angular/material/select';\nimport * as i3 from '@angular/material/core';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { MatInputModule } from '@angular/material/input';\n\nclass F7gSelectComponent {\n    constructor() {\n        this.data = [];\n        this.multiple = false;\n        this.searcheable = false;\n        this.label = '';\n        this.placeholder = '';\n        this.selectedOption = '';\n        this.required = false;\n        this.output = new EventEmitter();\n        this.select = this.required\n            ? new FormControl(null, [Validators.required])\n            : new FormControl(null);\n    }\n    ngOnInit() {\n        this.selectedData = this.data?.sort((a, b) => (a.name > b.name && 1) || -1);\n    }\n    ngOnChanges(changes) {\n        if (changes.data && changes.data.firstChange === false) {\n            this.selectedData = changes.data.currentValue?.sort((a, b) => (a.name > b.name && 1) || -1);\n        }\n    }\n    onKey(event) {\n        this.selectedData = this.search(event.value);\n    }\n    search(value) {\n        let filter = value.toLowerCase();\n        return this.data.filter((option) => option.name.toLowerCase().includes(filter));\n    }\n    emitValue(event) {\n        if (typeof event.value === 'string') {\n            this.output.emit([event.value]);\n        }\n        else {\n            this.output.emit(event.value);\n        }\n    }\n}\nF7gSelectComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: F7gSelectComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nF7gSelectComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0\", type: F7gSelectComponent, selector: \"f7g-select\", inputs: { data: \"data\", multiple: \"multiple\", searcheable: \"searcheable\", label: \"label\", placeholder: \"placeholder\", selectedOption: \"selectedOption\", required: \"required\" }, outputs: { output: \"output\" }, usesOnChanges: true, ngImport: i0, template: \"<mat-form-field appearance=\\\"fill\\\">\\n  <mat-label>{{ label }}</mat-label>\\n  <mat-select\\n    [formControl]=\\\"select\\\"\\n    [multiple]=\\\"multiple\\\"\\n    (selectionChange)=\\\"emitValue($event)\\\"\\n    [(ngModel)]=\\\"selectedOption\\\"\\n    [required]=\\\"required\\\"\\n  >\\n    <div class=\\\"search-bar\\\">\\n      <input\\n        class=\\\"search-input\\\"\\n        (keyup)=\\\"onKey($event.target)\\\"\\n        *ngIf=\\\"searcheable\\\"\\n        (keydown)=\\\"$event.stopPropagation()\\\"\\n        placeholder=\\\"{{ placeholder }}\\\"\\n      />\\n    </div>\\n    <div class=\\\"options\\\">\\n      <mat-option *ngFor=\\\"let item of selectedData\\\" [value]=\\\"item.id\\\">\\n        {{ item.name }}\\n      </mat-option>\\n    </div>\\n  </mat-select>\\n  <mat-error *ngIf=\\\"required\\\">Input field is required</mat-error>\\n</mat-form-field>\\n\", styles: [\".search-bar{padding:10px 15px;position:fixed;top:0;left:0;width:calc(100% - 15px);z-index:1;background-color:#fff}::ng-deep .mat-select-panel{transform:none!important}.search-input{width:calc(100% - 20px);border:1px solid #dbdbdb;background-color:#f5f5f5;border-radius:10px;padding:8px 10px;font-size:15px}.options{margin-top:55px}\\n\"], dependencies: [{ kind: \"directive\", type: i1.MatError, selector: \"mat-error\", inputs: [\"id\"] }, { kind: \"component\", type: i1.MatFormField, selector: \"mat-form-field\", inputs: [\"color\", \"appearance\", \"hideRequiredMarker\", \"hintLabel\", \"floatLabel\"], exportAs: [\"matFormField\"] }, { kind: \"directive\", type: i1.MatLabel, selector: \"mat-label\" }, { kind: \"component\", type: i2.MatSelect, selector: \"mat-select\", inputs: [\"disabled\", \"disableRipple\", \"tabIndex\"], exportAs: [\"matSelect\"] }, { kind: \"component\", type: i3.MatOption, selector: \"mat-option\", exportAs: [\"matOption\"] }, { kind: \"directive\", type: i4.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i4.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i5.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i5.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { kind: \"directive\", type: i5.FormControlDirective, selector: \"[formControl]\", inputs: [\"formControl\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"], exportAs: [\"ngForm\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: F7gSelectComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'f7g-select', template: \"<mat-form-field appearance=\\\"fill\\\">\\n  <mat-label>{{ label }}</mat-label>\\n  <mat-select\\n    [formControl]=\\\"select\\\"\\n    [multiple]=\\\"multiple\\\"\\n    (selectionChange)=\\\"emitValue($event)\\\"\\n    [(ngModel)]=\\\"selectedOption\\\"\\n    [required]=\\\"required\\\"\\n  >\\n    <div class=\\\"search-bar\\\">\\n      <input\\n        class=\\\"search-input\\\"\\n        (keyup)=\\\"onKey($event.target)\\\"\\n        *ngIf=\\\"searcheable\\\"\\n        (keydown)=\\\"$event.stopPropagation()\\\"\\n        placeholder=\\\"{{ placeholder }}\\\"\\n      />\\n    </div>\\n    <div class=\\\"options\\\">\\n      <mat-option *ngFor=\\\"let item of selectedData\\\" [value]=\\\"item.id\\\">\\n        {{ item.name }}\\n      </mat-option>\\n    </div>\\n  </mat-select>\\n  <mat-error *ngIf=\\\"required\\\">Input field is required</mat-error>\\n</mat-form-field>\\n\", styles: [\".search-bar{padding:10px 15px;position:fixed;top:0;left:0;width:calc(100% - 15px);z-index:1;background-color:#fff}::ng-deep .mat-select-panel{transform:none!important}.search-input{width:calc(100% - 20px);border:1px solid #dbdbdb;background-color:#f5f5f5;border-radius:10px;padding:8px 10px;font-size:15px}.options{margin-top:55px}\\n\"] }]\n        }], ctorParameters: function () { return []; }, propDecorators: { data: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }], searcheable: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], selectedOption: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], output: [{\n                type: Output\n            }] } });\n\nclass F7gSelectModule {\n}\nF7gSelectModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: F7gSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nF7gSelectModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: F7gSelectModule, declarations: [F7gSelectComponent], imports: [MatFormFieldModule,\n        MatInputModule,\n        MatSelectModule,\n        CommonModule,\n        ReactiveFormsModule,\n        FormsModule], exports: [F7gSelectComponent] });\nF7gSelectModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: F7gSelectModule, imports: [MatFormFieldModule,\n        MatInputModule,\n        MatSelectModule,\n        CommonModule,\n        ReactiveFormsModule,\n        FormsModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: F7gSelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [F7gSelectComponent],\n                    imports: [\n                        MatFormFieldModule,\n                        MatInputModule,\n                        MatSelectModule,\n                        CommonModule,\n                        ReactiveFormsModule,\n                        FormsModule,\n                    ],\n                    exports: [F7gSelectComponent],\n                }]\n        }] });\n\n/*\n * Public API Surface of f7g-select\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { F7gSelectComponent, F7gSelectModule };\n//# sourceMappingURL=f7g-select.mjs.map\n","map":{"version":3,"file":"f7g-select.mjs","sources":["../../../projects/f7g-select/src/lib/f7g-select.component.ts","../../../projects/f7g-select/src/lib/f7g-select.component.html","../../../projects/f7g-select/src/lib/f7g-select.module.ts","../../../projects/f7g-select/src/public-api.ts","../../../projects/f7g-select/src/f7g-select.ts"],"sourcesContent":["import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n} from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'f7g-select',\n  templateUrl: './f7g-select.component.html',\n  styleUrls: ['./f7g-select.component.css'],\n})\nexport class F7gSelectComponent implements OnInit, OnChanges {\n  @Input() data: any = [];\n  @Input() multiple: boolean = false;\n  @Input() searcheable: boolean = false;\n  @Input() label: string = '';\n  @Input() placeholder: string = '';\n  @Input() selectedOption: string = '';\n  @Input() required: boolean = false;\n\n  @Output() output = new EventEmitter<any>();\n\n  select = this.required\n    ? new FormControl(null, [Validators.required])\n    : new FormControl(null);\n\n  selectedData: any;\n  constructor() {}\n\n  ngOnInit(): void {\n    this.selectedData = this.data?.sort(\n      (a: any, b: any) => (a.name > b.name && 1) || -1\n    );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.data && changes.data.firstChange === false) {\n      this.selectedData = changes.data.currentValue?.sort(\n        (a: any, b: any) => (a.name > b.name && 1) || -1\n      );\n    }\n  }\n\n  onKey(event: any) {\n    this.selectedData = this.search(event.value);\n  }\n\n  search(value: string) {\n    let filter = value.toLowerCase();\n    return this.data.filter((option: any) =>\n      option.name.toLowerCase().includes(filter)\n    );\n  }\n\n  emitValue(event: any) {\n    if (typeof event.value === 'string') {\n      this.output.emit([event.value]);\n    } else {\n      this.output.emit(event.value);\n    }\n  }\n}\n","<mat-form-field appearance=\"fill\">\n  <mat-label>{{ label }}</mat-label>\n  <mat-select\n    [formControl]=\"select\"\n    [multiple]=\"multiple\"\n    (selectionChange)=\"emitValue($event)\"\n    [(ngModel)]=\"selectedOption\"\n    [required]=\"required\"\n  >\n    <div class=\"search-bar\">\n      <input\n        class=\"search-input\"\n        (keyup)=\"onKey($event.target)\"\n        *ngIf=\"searcheable\"\n        (keydown)=\"$event.stopPropagation()\"\n        placeholder=\"{{ placeholder }}\"\n      />\n    </div>\n    <div class=\"options\">\n      <mat-option *ngFor=\"let item of selectedData\" [value]=\"item.id\">\n        {{ item.name }}\n      </mat-option>\n    </div>\n  </mat-select>\n  <mat-error *ngIf=\"required\">Input field is required</mat-error>\n</mat-form-field>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { F7gSelectComponent } from './f7g-select.component';\n// mat component\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [F7gSelectComponent],\n  imports: [\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n  ],\n  exports: [F7gSelectComponent],\n})\nexport class F7gSelectModule {}\n","/*\n * Public API Surface of f7g-select\n */\n\nexport * from './lib/f7g-select.component';\nexport * from './lib/f7g-select.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, Input, Output, NgModule } from '@angular/core';\nimport * as i5 from '@angular/forms';\nimport { FormControl, Validators, ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport * as i1 from '@angular/material/form-field';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport * as i2 from '@angular/material/select';\nimport { MatSelectModule } from '@angular/material/select';\nimport * as i3 from '@angular/material/core';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { MatInputModule } from '@angular/material/input';\n\nclass F7gSelectComponent {\n    constructor() {\n        this.data = [];\n        this.multiple = false;\n        this.searcheable = false;\n        this.label = '';\n        this.placeholder = '';\n        this.selectedOption = '';\n        this.required = false;\n        this.output = new EventEmitter();\n        this.select = this.required\n            ? new FormControl(null, [Validators.required])\n            : new FormControl(null);\n    }\n    ngOnInit() {\n        var _a;\n        this.selectedData = (_a = this.data) === null || _a === void 0 ? void 0 : _a.sort((a, b) => (a.name > b.name && 1) || -1);\n    }\n    ngOnChanges(changes) {\n        var _a;\n        if (changes.data && changes.data.firstChange === false) {\n            this.selectedData = (_a = changes.data.currentValue) === null || _a === void 0 ? void 0 : _a.sort((a, b) => (a.name > b.name && 1) || -1);\n        }\n    }\n    onKey(event) {\n        this.selectedData = this.search(event.value);\n    }\n    search(value) {\n        let filter = value.toLowerCase();\n        return this.data.filter((option) => option.name.toLowerCase().includes(filter));\n    }\n    emitValue(event) {\n        if (typeof event.value === 'string') {\n            this.output.emit([event.value]);\n        }\n        else {\n            this.output.emit(event.value);\n        }\n    }\n}\nF7gSelectComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: F7gSelectComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nF7gSelectComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0\", type: F7gSelectComponent, selector: \"f7g-select\", inputs: { data: \"data\", multiple: \"multiple\", searcheable: \"searcheable\", label: \"label\", placeholder: \"placeholder\", selectedOption: \"selectedOption\", required: \"required\" }, outputs: { output: \"output\" }, usesOnChanges: true, ngImport: i0, template: \"<mat-form-field appearance=\\\"fill\\\">\\n  <mat-label>{{ label }}</mat-label>\\n  <mat-select\\n    [formControl]=\\\"select\\\"\\n    [multiple]=\\\"multiple\\\"\\n    (selectionChange)=\\\"emitValue($event)\\\"\\n    [(ngModel)]=\\\"selectedOption\\\"\\n    [required]=\\\"required\\\"\\n  >\\n    <div class=\\\"search-bar\\\">\\n      <input\\n        class=\\\"search-input\\\"\\n        (keyup)=\\\"onKey($event.target)\\\"\\n        *ngIf=\\\"searcheable\\\"\\n        (keydown)=\\\"$event.stopPropagation()\\\"\\n        placeholder=\\\"{{ placeholder }}\\\"\\n      />\\n    </div>\\n    <div class=\\\"options\\\">\\n      <mat-option *ngFor=\\\"let item of selectedData\\\" [value]=\\\"item.id\\\">\\n        {{ item.name }}\\n      </mat-option>\\n    </div>\\n  </mat-select>\\n  <mat-error *ngIf=\\\"required\\\">Input field is required</mat-error>\\n</mat-form-field>\\n\", styles: [\".search-bar{padding:10px 15px;position:fixed;top:0;left:0;width:calc(100% - 15px);z-index:1;background-color:#fff}::ng-deep .mat-select-panel{transform:none!important}.search-input{width:calc(100% - 20px);border:1px solid #dbdbdb;background-color:#f5f5f5;border-radius:10px;padding:8px 10px;font-size:15px}.options{margin-top:55px}\\n\"], dependencies: [{ kind: \"directive\", type: i1.MatError, selector: \"mat-error\", inputs: [\"id\"] }, { kind: \"component\", type: i1.MatFormField, selector: \"mat-form-field\", inputs: [\"color\", \"appearance\", \"hideRequiredMarker\", \"hintLabel\", \"floatLabel\"], exportAs: [\"matFormField\"] }, { kind: \"directive\", type: i1.MatLabel, selector: \"mat-label\" }, { kind: \"component\", type: i2.MatSelect, selector: \"mat-select\", inputs: [\"disabled\", \"disableRipple\", \"tabIndex\"], exportAs: [\"matSelect\"] }, { kind: \"component\", type: i3.MatOption, selector: \"mat-option\", exportAs: [\"matOption\"] }, { kind: \"directive\", type: i4.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i4.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i5.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i5.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { kind: \"directive\", type: i5.FormControlDirective, selector: \"[formControl]\", inputs: [\"formControl\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"], exportAs: [\"ngForm\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: F7gSelectComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'f7g-select', template: \"<mat-form-field appearance=\\\"fill\\\">\\n  <mat-label>{{ label }}</mat-label>\\n  <mat-select\\n    [formControl]=\\\"select\\\"\\n    [multiple]=\\\"multiple\\\"\\n    (selectionChange)=\\\"emitValue($event)\\\"\\n    [(ngModel)]=\\\"selectedOption\\\"\\n    [required]=\\\"required\\\"\\n  >\\n    <div class=\\\"search-bar\\\">\\n      <input\\n        class=\\\"search-input\\\"\\n        (keyup)=\\\"onKey($event.target)\\\"\\n        *ngIf=\\\"searcheable\\\"\\n        (keydown)=\\\"$event.stopPropagation()\\\"\\n        placeholder=\\\"{{ placeholder }}\\\"\\n      />\\n    </div>\\n    <div class=\\\"options\\\">\\n      <mat-option *ngFor=\\\"let item of selectedData\\\" [value]=\\\"item.id\\\">\\n        {{ item.name }}\\n      </mat-option>\\n    </div>\\n  </mat-select>\\n  <mat-error *ngIf=\\\"required\\\">Input field is required</mat-error>\\n</mat-form-field>\\n\", styles: [\".search-bar{padding:10px 15px;position:fixed;top:0;left:0;width:calc(100% - 15px);z-index:1;background-color:#fff}::ng-deep .mat-select-panel{transform:none!important}.search-input{width:calc(100% - 20px);border:1px solid #dbdbdb;background-color:#f5f5f5;border-radius:10px;padding:8px 10px;font-size:15px}.options{margin-top:55px}\\n\"] }]\n        }], ctorParameters: function () { return []; }, propDecorators: { data: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }], searcheable: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], selectedOption: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], output: [{\n                type: Output\n            }] } });\n\nclass F7gSelectModule {\n}\nF7gSelectModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: F7gSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nF7gSelectModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: F7gSelectModule, declarations: [F7gSelectComponent], imports: [MatFormFieldModule,\n        MatInputModule,\n        MatSelectModule,\n        CommonModule,\n        ReactiveFormsModule,\n        FormsModule], exports: [F7gSelectComponent] });\nF7gSelectModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: F7gSelectModule, imports: [MatFormFieldModule,\n        MatInputModule,\n        MatSelectModule,\n        CommonModule,\n        ReactiveFormsModule,\n        FormsModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: F7gSelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [F7gSelectComponent],\n                    imports: [\n                        MatFormFieldModule,\n                        MatInputModule,\n                        MatSelectModule,\n                        CommonModule,\n                        ReactiveFormsModule,\n                        FormsModule,\n                    ],\n                    exports: [F7gSelectComponent],\n                }]\n        }] });\n\n/*\n * Public API Surface of f7g-select\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { F7gSelectComponent, F7gSelectModule };\n//# sourceMappingURL=f7g-select.mjs.map\n","map":{"version":3,"file":"f7g-select.mjs","sources":["../../../projects/f7g-select/src/lib/f7g-select.component.ts","../../../projects/f7g-select/src/lib/f7g-select.component.html","../../../projects/f7g-select/src/lib/f7g-select.module.ts","../../../projects/f7g-select/src/public-api.ts","../../../projects/f7g-select/src/f7g-select.ts"],"sourcesContent":["import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n} from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'f7g-select',\n  templateUrl: './f7g-select.component.html',\n  styleUrls: ['./f7g-select.component.css'],\n})\nexport class F7gSelectComponent implements OnInit, OnChanges {\n  @Input() data: any = [];\n  @Input() multiple: boolean = false;\n  @Input() searcheable: boolean = false;\n  @Input() label: string = '';\n  @Input() placeholder: string = '';\n  @Input() selectedOption: string = '';\n  @Input() required: boolean = false;\n\n  @Output() output = new EventEmitter<any>();\n\n  select = this.required\n    ? new FormControl(null, [Validators.required])\n    : new FormControl(null);\n\n  selectedData: any;\n  constructor() {}\n\n  ngOnInit(): void {\n    this.selectedData = this.data?.sort(\n      (a: any, b: any) => (a.name > b.name && 1) || -1\n    );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.data && changes.data.firstChange === false) {\n      this.selectedData = changes.data.currentValue?.sort(\n        (a: any, b: any) => (a.name > b.name && 1) || -1\n      );\n    }\n  }\n\n  onKey(event: any) {\n    this.selectedData = this.search(event.value);\n  }\n\n  search(value: string) {\n    let filter = value.toLowerCase();\n    return this.data.filter((option: any) =>\n      option.name.toLowerCase().includes(filter)\n    );\n  }\n\n  emitValue(event: any) {\n    if (typeof event.value === 'string') {\n      this.output.emit([event.value]);\n    } else {\n      this.output.emit(event.value);\n    }\n  }\n}\n","<mat-form-field appearance=\"fill\">\n  <mat-label>{{ label }}</mat-label>\n  <mat-select\n    [formControl]=\"select\"\n    [multiple]=\"multiple\"\n    (selectionChange)=\"emitValue($event)\"\n    [(ngModel)]=\"selectedOption\"\n    [required]=\"required\"\n  >\n    <div class=\"search-bar\">\n      <input\n        class=\"search-input\"\n        (keyup)=\"onKey($event.target)\"\n        *ngIf=\"searcheable\"\n        (keydown)=\"$event.stopPropagation()\"\n        placeholder=\"{{ placeholder }}\"\n      />\n    </div>\n    <div class=\"options\">\n      <mat-option *ngFor=\"let item of selectedData\" [value]=\"item.id\">\n        {{ item.name }}\n      </mat-option>\n    </div>\n  </mat-select>\n  <mat-error *ngIf=\"required\">Input field is required</mat-error>\n</mat-form-field>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { F7gSelectComponent } from './f7g-select.component';\n// mat component\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [F7gSelectComponent],\n  imports: [\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n  ],\n  exports: [F7gSelectComponent],\n})\nexport class F7gSelectModule {}\n","/*\n * Public API Surface of f7g-select\n */\n\nexport * from './lib/f7g-select.component';\nexport * from './lib/f7g-select.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}}}